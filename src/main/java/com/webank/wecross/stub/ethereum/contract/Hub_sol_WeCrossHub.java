package com.webank.wecross.stub.ethereum.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class Hub_sol_WeCrossHub extends Contract {
    public static final String BINARY = "608060405260006000600050909055600060016000509090553480156100255760006000fd5b5061002b565b611b638061003a6000396000f3fe60806040523480156100115760006000fd5b506004361061008d5760003560e01c80636ac4691f1161005c5780636ac4691f1461012d57806388a67acf1461014b578063a87b24f914610167578063dfd3523d146101975761008d565b80630d8e6e2c146100935780633575dd88146100b157806340280d38146100e1578063460d3d27146100fd5761008d565b60006000fd5b61009b6101c7565b6040516100a8919061193d565b60405180910390f35b6100cb60048036036100c691908101906115f2565b61020c565b6040516100d8919061193d565b60405180910390f35b6100fb60048036036100f691908101906115f2565b6103d6565b005b610117600480360361011291908101906113d8565b6103f4565b604051610124919061193d565b60405180910390f35b610135610452565b604051610142919061195f565b60405180910390f35b610165600480360361016091908101906114cf565b610464565b005b610181600480360361017c91908101906113d8565b6104e4565b60405161018e919061193d565b60405180910390f35b6101b160048036036101ac9190810190611395565b610542565b6040516101be919061191b565b60405180910390f35b60606040518060400160405280600681526020017f76312e302e3000000000000000000000000000000000000000000000000000008152602001509050610209565b90565b60606000600050546001600050541415610260576040518060400160405280600481526020017f6e756c6c0000000000000000000000000000000000000000000000000000000081526020015090506103d1565b60006001600050546000600050540383106102875760016000505460006000505403610289565b825b90506060816040519080825280602002602001820160405280156102c157816020015b60608152602001906001900390816102ac5790505b5090506000600090505b828110156103b65760026000506000600183600160005054010181526020019081526020016000206000508054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561038a5780601f1061035f5761010080835404028352916020019161038a565b820191906000526020600020905b81548152906001019060200180831161036d57829003601f168201915b5050505050828281518110151561039d57fe5b60200260200101819052505b80806001019150506102cb565b506103c68161065963ffffffff16565b925050506103d15650505b919050565b8060016000505410156103f0578060016000508190909055505b5b50565b60606104426040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815260200150878787878761085963ffffffff16565b9050610449565b95945050505050565b60006000600050549050610461565b90565b61046c611020565b6040518060a0016040528087815260200186815260200185815260200184815260200161049e8461065963ffffffff16565b8152602001509050806003600050886040516104ba9190611858565b90815260200160405180910390206000509060056104d9929190611047565b50505b505050505050565b60606105326040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815260200150878787878761085963ffffffff16565b9050610539565b95945050505050565b60606003600050826040516105579190611858565b9081526020016040518091039020600050805480602002602001604051908101604052809291908181526020016000905b82821015610649578382906000526020600020900160005b508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106355780601f1061060a57610100808354040283529160200191610635565b820191906000526020600020905b81548152906001019060200180831161061857829003601f168201915b505050505081526020019060010190610588565b505050509050610654565b919050565b606060008251905060008114156106ab576040518060400160405280600281526020017f5b5d000000000000000000000000000000000000000000000000000000000000815260200150915050610854565b6040518060400160405280600181526020017f5b00000000000000000000000000000000000000000000000000000000000000815260200150915081506000600090505b60018203811015610799578260405160200161070b91906118b5565b6040516020818303038152906040529250825082610743858381518110151561073057fe5b60200260200101516109fb63ffffffff16565b60405160200161075492919061186f565b60405160208183030381529060405292508250826040516020016107789190611893565b604051602081830303815290604052925082505b80806001019150506106ef565b50816040516020016107ab91906118b5565b60405160208183030381529060405291508150816107e684600184038151811015156107d357fe5b60200260200101516109fb63ffffffff16565b6040516020016107f792919061186f565b604051602081830303815290604052915081508160405160200161081b91906118b5565b604051602081830303815290604052915081508160405160200161083f91906118d7565b60405160208183030381529060405291508150505b919050565b606061087c60006000818150546001019190508190909055610cb163ffffffff16565b90508050606060086040519080825280602002602001820160405280156108b757816020015b60608152602001906001900390816108a25790505b509050818160008151811015156108ca57fe5b6020026020010181905250878160018151811015156108e557fe5b60200260200101819052508681600281518110151561090057fe5b60200260200101819052508581600381518110151561091b57fe5b60200260200101819052506109358561065963ffffffff16565b81600481518110151561094457fe5b60200260200101819052508381600581518110151561095f57fe5b60200260200101819052508281600681518110151561097a57fe5b602002602001018190525061099432610d8f63ffffffff16565b8160078151811015156109a357fe5b60200260200101819052506109bd8161065963ffffffff16565b60026000506000600060005054815260200190815260200160002060005090805190602001906109ee9291906110a7565b50505b9695505050505050565b606060608290506000815190506060600282026040519080825280601f01601f191660200182016040528015610a405781602001600182028038833980820191505090505b5090506000600090506000600090505b83811015610bed577f5c000000000000000000000000000000000000000000000000000000000000008582815181101515610a8757fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610b1957507f22000000000000000000000000000000000000000000000000000000000000008582815181101515610aea57fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b15610b83577f5c000000000000000000000000000000000000000000000000000000000000008383806001019450815181101515610b5357fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b8481815181101515610b9157fe5b602001015160f81c60f81b8383806001019450815181101515610bb057fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b8080600101915050610a50565b6060826040519080825280601f01601f191660200182016040528015610c225781602001600182028038833980820191505090505b5090506000915081505b82821015610c98578382815181101515610c4257fe5b602001015160f81c60f81b8183815181101515610c5b57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b8180600101925050610c2c565b809650505050505050610cac565050505050505b919050565b606060006000831415610cff576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815260200150915050610d8a565b5b6000831115610d72576101008160001c811515610d1957fe5b0460001b905080507f01000000000000000000000000000000000000000000000000000000000000006030600a85811515610d5057fe5b06010260001b811790508050600a83811515610d6857fe5b0492508250610d00565b610d8181610f1a63ffffffff16565b915050610d8a56505b919050565b6060606060286040519080825280601f01601f191660200182016040528015610dc75781602001600182028038833980820191505090505b5090506000600090505b6014811015610eeb5760008160130360080260020a8573ffffffffffffffffffffffffffffffffffffffff16811515610e0657fe5b0460f81b9050600060108260f81c60ff16811515610e2057fe5b0460f81b905060008160f81c6010028360f81c0360f81b9050610e4882610fe363ffffffff16565b8585600202815181101515610e5957fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610e9781610fe363ffffffff16565b8560018660020201815181101515610eab57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505050505b8080600101915050610dd1565b5080604051602001610efd91906118f9565b604051602081830303815290604052915050610f1556505b919050565b606060608250602060ff166040519080825280601f01601f191660200182016040528015610f575781602001600182028038833980820191505090505b50905060008350602060ff1690506000600090505b81811015610fd1578481602081101515610f8257fe5b1a60f81b8382815181101515610f9457fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b8080600101915050610f6c565b508192505050610fde5650505b919050565b6000600a8260f81c60ff1610156110095760308260f81c0160f81b905061101b5661101a565b60578260f81c0160f81b905061101b565b5b919050565b6040518060a001604052806005905b606081526020019060019003908161102f5790505090565b828054828255906000526020600020908101928215611096579160200282015b8281111561109557825182908051906020019061108592919061112c565b5091602001919060010190611067565b5b5090506110a391906111b1565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106110e857805160ff191683800117855561111b565b8280016001018555821561111b579182015b8281111561111a57825182600050909055916020019190600101906110fa565b5b50905061112891906111e1565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061116d57805160ff19168380011785556111a0565b828001600101855582156111a0579182015b8281111561119f578251826000509090559160200191906001019061117f565b5b5090506111ad91906111e1565b5090565b6111de91906111bb565b808211156111da57600081816111d1919061120c565b506001016111bb565b5090565b90565b61120991906111eb565b8082111561120557600081815060009055506001016111eb565b5090565b90565b50805460018160011615610100020316600290046000825580601f106112325750611251565b601f01602090049060005260206000209081019061125091906111e1565b5b5056611b1f565b600082601f830112151561126c5760006000fd5b813561127f61127a826119a8565b61197a565b9150818183526020840193506020810190508360005b838110156112c657813586016112ab88826112d0565b8452602084019350602083019250505b600181019050611295565b5050505092915050565b600082601f83011215156112e45760006000fd5b81356112f76112f2826119d1565b61197a565b915080825260208301602083018583830111156113145760006000fd5b61131f838284611ab1565b50505092915050565b600082601f830112151561133c5760006000fd5b813561134f61134a826119fe565b61197a565b9150808252602083016020830185838301111561136c5760006000fd5b611377838284611ab1565b50505092915050565b60008135905061138f81611b05565b92915050565b6000602082840312156113a85760006000fd5b600082013567ffffffffffffffff8111156113c35760006000fd5b6113cf84828501611328565b91505092915050565b6000600060006000600060a086880312156113f35760006000fd5b600086013567ffffffffffffffff81111561140e5760006000fd5b61141a88828901611328565b955050602086013567ffffffffffffffff8111156114385760006000fd5b61144488828901611328565b945050604086013567ffffffffffffffff8111156114625760006000fd5b61146e88828901611258565b935050606086013567ffffffffffffffff81111561148c5760006000fd5b61149888828901611328565b925050608086013567ffffffffffffffff8111156114b65760006000fd5b6114c288828901611328565b9150509295509295909350565b60006000600060006000600060c087890312156114ec5760006000fd5b600087013567ffffffffffffffff8111156115075760006000fd5b61151389828a01611328565b965050602087013567ffffffffffffffff8111156115315760006000fd5b61153d89828a01611328565b955050604087013567ffffffffffffffff81111561155b5760006000fd5b61156789828a01611328565b945050606087013567ffffffffffffffff8111156115855760006000fd5b61159189828a01611328565b935050608087013567ffffffffffffffff8111156115af5760006000fd5b6115bb89828a01611328565b92505060a087013567ffffffffffffffff8111156115d95760006000fd5b6115e589828a01611258565b9150509295509295509295565b6000602082840312156116055760006000fd5b600061161384828501611380565b91505092915050565b60006116288383611710565b905092915050565b600061163b82611a3b565b6116458185611a69565b93508360208202850161165785611a2b565b8060005b858110156116945784840389528151611674858261161c565b945061167f83611a5c565b925060208a019950505b60018101905061165b565b50829750879550505050505092915050565b60006116b182611a51565b6116bb8185611a8b565b93506116cb818560208601611ac0565b6116d481611af4565b840191505092915050565b60006116ea82611a51565b6116f48185611a9c565b9350611704818560208601611ac0565b80840191505092915050565b600061171b82611a46565b6117258185611a7a565b9350611735818560208601611ac0565b61173e81611af4565b840191505092915050565b6000611756600283611a9c565b91507f222c0000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b6000611796600283611a9c565b91507f30780000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b60006117d6600183611a9c565b91507f22000000000000000000000000000000000000000000000000000000000000006000830152600182019050919050565b6000611816600183611a9c565b91507f5d000000000000000000000000000000000000000000000000000000000000006000830152600182019050919050565b61185281611aa7565b82525050565b600061186482846116df565b915081905092915050565b600061187b82856116df565b915061188782846116df565b91508190509392505050565b600061189f82846116df565b91506118aa82611749565b915081905092915050565b60006118c182846116df565b91506118cc826117c9565b915081905092915050565b60006118e382846116df565b91506118ee82611809565b915081905092915050565b600061190482611789565b915061191082846116df565b915081905092915050565b600060208201905081810360008301526119358184611630565b905092915050565b6000602082019050818103600083015261195781846116a6565b905092915050565b60006020820190506119746000830184611849565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561199e5760006000fd5b8060405250919050565b600067ffffffffffffffff8211156119c05760006000fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156119e95760006000fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115611a165760006000fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b60005b83811015611adf5780820151818401525b602081019050611ac3565b83811115611aee576000848401525b50505050565b6000601f19601f8301169050919050565b611b0e81611aa7565b81141515611b1c5760006000fd5b50565bfea365627a7a723158203a74d91eb1e41a2385ff2421595f46718ccacaf36936e9c6c84953033cea18546c6578706572696d656e74616cf564736f6c63430005110040";

    public static final String FUNC_GETINCREMENT = "getIncrement";

    public static final String FUNC_GETINTERCHAINREQUESTS = "getInterchainRequests";

    public static final String FUNC_GETVERSION = "getVersion";

    public static final String FUNC_INTERCHAININVOKE = "interchainInvoke";

    public static final String FUNC_INTERCHAINQUERY = "interchainQuery";

    public static final String FUNC_REGISTERCALLBACKRESULT = "registerCallbackResult";

    public static final String FUNC_SELECTCALLBACKRESULT = "selectCallbackResult";

    public static final String FUNC_UPDATECURRENTREQUESTINDEX = "updateCurrentRequestIndex";

    @Deprecated
    protected Hub_sol_WeCrossHub(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Hub_sol_WeCrossHub(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Hub_sol_WeCrossHub(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Hub_sol_WeCrossHub(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<BigInteger> getIncrement() {
        final Function function = new Function(FUNC_GETINCREMENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getInterchainRequests(BigInteger _num) {
        final Function function = new Function(FUNC_GETINTERCHAINREQUESTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_num)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getVersion() {
        final Function function = new Function(FUNC_GETVERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> interchainInvoke(String _path, String _method, List<String> _args, String _callbackPath, String _callbackMethod) {
        final Function function = new Function(
                FUNC_INTERCHAININVOKE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_path), 
                new org.web3j.abi.datatypes.Utf8String(_method), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(_args, org.web3j.abi.datatypes.Utf8String.class)), 
                new org.web3j.abi.datatypes.Utf8String(_callbackPath), 
                new org.web3j.abi.datatypes.Utf8String(_callbackMethod)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> interchainQuery(String _path, String _method, List<String> _args, String _callbackPath, String _callbackMethod) {
        final Function function = new Function(
                FUNC_INTERCHAINQUERY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_path), 
                new org.web3j.abi.datatypes.Utf8String(_method), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(_args, org.web3j.abi.datatypes.Utf8String.class)), 
                new org.web3j.abi.datatypes.Utf8String(_callbackPath), 
                new org.web3j.abi.datatypes.Utf8String(_callbackMethod)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> registerCallbackResult(String _uid, String _tid, String _seq, String _errorCode, String _errorMsg, List<String> _result) {
        final Function function = new Function(
                FUNC_REGISTERCALLBACKRESULT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uid), 
                new org.web3j.abi.datatypes.Utf8String(_tid), 
                new org.web3j.abi.datatypes.Utf8String(_seq), 
                new org.web3j.abi.datatypes.Utf8String(_errorCode), 
                new org.web3j.abi.datatypes.Utf8String(_errorMsg), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(_result, org.web3j.abi.datatypes.Utf8String.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> selectCallbackResult(String _uid) {
        final Function function = new Function(FUNC_SELECTCALLBACKRESULT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> updateCurrentRequestIndex(BigInteger _index) {
        final Function function = new Function(
                FUNC_UPDATECURRENTREQUESTINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_index)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Hub_sol_WeCrossHub load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Hub_sol_WeCrossHub(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Hub_sol_WeCrossHub load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Hub_sol_WeCrossHub(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Hub_sol_WeCrossHub load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Hub_sol_WeCrossHub(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Hub_sol_WeCrossHub load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Hub_sol_WeCrossHub(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Hub_sol_WeCrossHub> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Hub_sol_WeCrossHub.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Hub_sol_WeCrossHub> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Hub_sol_WeCrossHub.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Hub_sol_WeCrossHub> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Hub_sol_WeCrossHub.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Hub_sol_WeCrossHub> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Hub_sol_WeCrossHub.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
